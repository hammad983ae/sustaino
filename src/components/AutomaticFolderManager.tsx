import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { 
  Folder, 
  FolderPlus, 
  Upload, 
  FileText, 
  Image, 
  Calendar,
  MapPin,
  Building,
  Settings,
  Trash2,
  Download,
  Eye,
  CheckCircle
} from "lucide-react";
import { useState, useCallback, useEffect } from "react";
import { useToast } from "@/components/ui/use-toast";
import { supabase } from "@/integrations/supabase/client";

interface FolderStructure {
  id: string;
  name: string;
  path: string;
  type: 'property' | 'valuation' | 'report' | 'client' | 'custom';
  createdAt: Date;
  fileCount: number;
  totalSize: number;
  isAutoGenerated: boolean;
}

interface StoredFile {
  id: string;
  name: string;
  size: number;
  type: string;
  bucket: string;
  folder: string;
  uploadedAt: Date;
  url?: string;
}

const AutomaticFolderManager = () => {
  const [folders, setFolders] = useState<FolderStructure[]>([]);
  const [files, setFiles] = useState<StoredFile[]>([]);
  const [newFolderName, setNewFolderName] = useState("");
  const [selectedProperty, setSelectedProperty] = useState("");
  const [isCreatingFolder, setIsCreatingFolder] = useState(false);
  const [isLoadingFiles, setIsLoadingFiles] = useState(false);
  const { toast } = useToast();

  // Auto-generate folder structure based on current property/valuation
  const generateAutomaticFolders = useCallback(async (propertyAddress: string, jobNumber?: string) => {
    const baseDate = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format
    const sanitizedAddress = propertyAddress.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_');
    
    const autoFolders: Omit<FolderStructure, 'id' | 'fileCount' | 'totalSize'>[] = [
      {
        name: `${sanitizedAddress}_${baseDate}`,
        path: `properties/${sanitizedAddress}_${baseDate}`,
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: `Photos_${sanitizedAddress}`,
        path: `properties/${sanitizedAddress}_${baseDate}/photos`,
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: `Documents_${sanitizedAddress}`,
        path: `properties/${sanitizedAddress}_${baseDate}/documents`,
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: `Reports_${sanitizedAddress}`,
        path: `properties/${sanitizedAddress}_${baseDate}/reports`,
        type: 'report',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: `Valuations_${sanitizedAddress}`,
        path: `properties/${sanitizedAddress}_${baseDate}/valuations`,
        type: 'valuation',
        createdAt: new Date(),
        isAutoGenerated: true
      }
    ];

    if (jobNumber) {
      autoFolders.push({
        name: `${jobNumber}_${sanitizedAddress}`,
        path: `jobs/${jobNumber}`,
        type: 'valuation',
        createdAt: new Date(),
        isAutoGenerated: true
      });
    }

    return autoFolders.map(folder => ({
      ...folder,
      id: `auto_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      fileCount: 0,
      totalSize: 0
    }));
  }, []);

  // Load existing files from Supabase storage
  const loadStorageFiles = useCallback(async () => {
    setIsLoadingFiles(true);
    try {
      const buckets = ['documents', 'property-images', 'pdf-analysis'];
      const allFiles: StoredFile[] = [];

      for (const bucket of buckets) {
        const { data: bucketFiles, error } = await supabase.storage
          .from(bucket)
          .list('', { limit: 100 });

        if (error) {
          console.error(`Error loading files from ${bucket}:`, error);
          continue;
        }

        if (bucketFiles) {
          const mappedFiles = bucketFiles.map(file => ({
            id: `${bucket}_${file.name}`,
            name: file.name,
            size: file.metadata?.size || 0,
            type: file.metadata?.mimetype || 'unknown',
            bucket,
            folder: 'root',
            uploadedAt: new Date(file.created_at),
            url: `${bucket}/${file.name}`
          }));
          allFiles.push(...mappedFiles);
        }
      }

      setFiles(allFiles);
    } catch (error) {
      console.error('Error loading storage files:', error);
      toast({
        title: "Error",
        description: "Failed to load storage files",
        variant: "destructive",
      });
    } finally {
      setIsLoadingFiles(false);
    }
  }, [toast]);

  // Create new folder structure
  const createFolderStructure = useCallback(async (propertyAddress: string) => {
    if (!propertyAddress.trim()) {
      toast({
        title: "Error",
        description: "Property address is required",
        variant: "destructive",
      });
      return;
    }

    setIsCreatingFolder(true);
    try {
      const autoFolders = await generateAutomaticFolders(propertyAddress);
      setFolders(prev => [...prev, ...autoFolders]);
      
      toast({
        title: "Success",
        description: `Created ${autoFolders.length} folders for ${propertyAddress}`,
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to create folder structure",
        variant: "destructive",
      });
    } finally {
      setIsCreatingFolder(false);
    }
  }, [generateAutomaticFolders, toast]);

  // Create custom folder
  const createCustomFolder = useCallback(async () => {
    if (!newFolderName.trim()) {
      toast({
        title: "Error",
        description: "Folder name is required",
        variant: "destructive",
      });
      return;
    }

    const customFolder: FolderStructure = {
      id: `custom_${Date.now()}`,
      name: newFolderName,
      path: `custom/${newFolderName.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_')}`,
      type: 'custom',
      createdAt: new Date(),
      fileCount: 0,
      totalSize: 0,
      isAutoGenerated: false
    };

    setFolders(prev => [...prev, customFolder]);
    setNewFolderName("");
    
    toast({
      title: "Success",
      description: `Created custom folder: ${newFolderName}`,
    });
  }, [newFolderName, toast]);

  // Delete folder
  const deleteFolder = useCallback((folderId: string) => {
    setFolders(prev => prev.filter(f => f.id !== folderId));
    toast({
      title: "Success",
      description: "Folder deleted successfully",
    });
  }, [toast]);

  // Format file size
  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // Get folder icon
  const getFolderIcon = (type: string) => {
    switch (type) {
      case 'property': return <Building className="h-4 w-4" />;
      case 'valuation': return <FileText className="h-4 w-4" />;
      case 'report': return <FileText className="h-4 w-4" />;
      case 'client': return <MapPin className="h-4 w-4" />;
      default: return <Folder className="h-4 w-4" />;
    }
  };

  // Create Costa Group specific folders on component mount
  const createCostaGroupFolders = useCallback(async () => {
    const costaGroupFolders: Omit<FolderStructure, 'id' | 'fileCount' | 'totalSize'>[] = [
      {
        name: "Costa_Group_Valuations_2025",
        path: "costa-group/valuations/2025",
        type: 'valuation',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_Water_Rights",
        path: "costa-group/water-rights",
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_Crop_Forecasts",
        path: "costa-group/crop-forecasts",
        type: 'report',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_NSW_Properties",
        path: "costa-group/properties/nsw",
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_VIC_Properties",
        path: "costa-group/properties/vic",
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_QLD_Properties",
        path: "costa-group/properties/qld",
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_SA_Properties",
        path: "costa-group/properties/sa",
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_TAS_Properties",
        path: "costa-group/properties/tas",
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_WA_Properties",
        path: "costa-group/properties/wa",
        type: 'property',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_Leasehold_Analysis",
        path: "costa-group/leasehold-analysis",
        type: 'valuation',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_Market_Reports",
        path: "costa-group/market-reports",
        type: 'report',
        createdAt: new Date(),
        isAutoGenerated: true
      },
      {
        name: "Costa_Group_Financial_Analysis",
        path: "costa-group/financial-analysis",
        type: 'report',
        createdAt: new Date(),
        isAutoGenerated: true
      }
    ];

    const mappedFolders = costaGroupFolders.map(folder => ({
      ...folder,
      id: `costa_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      fileCount: 0,
      totalSize: 0
    }));

    setFolders(prev => [...prev, ...mappedFolders]);
    
    toast({
      title: "Success",
      description: `Created ${mappedFolders.length} Costa Group project folders`,
    });
  }, [toast]);

  useEffect(() => {
    loadStorageFiles();
    // Auto-create Costa Group folders
    createCostaGroupFolders();
  }, [loadStorageFiles, createCostaGroupFolders]);

  return (
    <Card className="w-full max-w-6xl mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Folder className="h-5 w-5" />
          Automatic Folder Management
        </CardTitle>
        <p className="text-sm text-muted-foreground">
          Organize your property files with automatic folder generation and smart file management
        </p>
      </CardHeader>
      <CardContent>
        <Tabs defaultValue="folders" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="folders">Folder Structure</TabsTrigger>
            <TabsTrigger value="auto-generate">Auto Generate</TabsTrigger>
            <TabsTrigger value="files">File Manager</TabsTrigger>
          </TabsList>

          <TabsContent value="folders" className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Current Folder Structure</h3>
              <Badge variant="secondary">
                {folders.length} folders created
              </Badge>
            </div>
            
            <div className="grid gap-4">
              {folders.length === 0 ? (
                <div className="text-center p-8 text-muted-foreground">
                  <Folder className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No folders created yet. Use the Auto Generate tab to create folders.</p>
                </div>
              ) : (
                folders.map((folder) => (
                  <Card key={folder.id} className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        {getFolderIcon(folder.type)}
                        <div>
                          <h4 className="font-medium">{folder.name}</h4>
                          <p className="text-sm text-muted-foreground">{folder.path}</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        {folder.isAutoGenerated && (
                          <Badge variant="outline" className="text-xs">
                            <CheckCircle className="h-3 w-3 mr-1" />
                            Auto
                          </Badge>
                        )}
                        <Badge variant="secondary" className="text-xs">
                          {folder.fileCount} files
                        </Badge>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => deleteFolder(folder.id)}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </Card>
                ))
              )}
            </div>
          </TabsContent>

          <TabsContent value="auto-generate" className="space-y-6">
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Generate Automatic Folder Structure</h3>
              <p className="text-sm text-muted-foreground">
                Create a complete folder structure for a property valuation job
              </p>
              
              <div className="space-y-4">
                <div>
                  <Label htmlFor="property-address">Property Address</Label>
                  <Input
                    id="property-address"
                    placeholder="320 Deakin Avenue Mildura VIC 3500"
                    value={selectedProperty}
                    onChange={(e) => setSelectedProperty(e.target.value)}
                  />
                </div>
                
                <Button
                  onClick={() => createFolderStructure(selectedProperty)}
                  disabled={isCreatingFolder || !selectedProperty.trim()}
                  className="w-full"
                >
                  <FolderPlus className="h-4 w-4 mr-2" />
                  {isCreatingFolder ? "Creating Folders..." : "Generate Folder Structure"}
                </Button>
              </div>
              
              <Separator />
              
              <div className="space-y-4">
                <h4 className="font-medium">Create Custom Folder</h4>
                <div className="flex gap-2">
                  <Input
                    placeholder="Enter folder name"
                    value={newFolderName}
                    onChange={(e) => setNewFolderName(e.target.value)}
                  />
                  <Button
                    onClick={createCustomFolder}
                    disabled={!newFolderName.trim()}
                  >
                    <FolderPlus className="h-4 w-4 mr-2" />
                    Create
                  </Button>
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="files" className="space-y-4">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium">Storage Files</h3>
              <div className="flex items-center gap-2">
                <Button
                  size="sm"
                  variant="outline"
                  onClick={loadStorageFiles}
                  disabled={isLoadingFiles}
                >
                  {isLoadingFiles ? "Loading..." : "Refresh"}
                </Button>
                <Badge variant="secondary">
                  {files.length} files
                </Badge>
              </div>
            </div>
            
            <div className="grid gap-2">
              {files.length === 0 ? (
                <div className="text-center p-8 text-muted-foreground">
                  <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
                  <p>No files found in storage buckets.</p>
                </div>
              ) : (
                files.map((file) => (
                  <Card key={file.id} className="p-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        {file.type.startsWith('image/') ? (
                          <Image className="h-4 w-4 text-blue-600" />
                        ) : (
                          <FileText className="h-4 w-4 text-red-600" />
                        )}
                        <div>
                          <p className="text-sm font-medium">{file.name}</p>
                          <p className="text-xs text-muted-foreground">
                            {file.bucket} • {formatFileSize(file.size)} • {file.uploadedAt.toLocaleDateString()}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <Button size="sm" variant="ghost">
                          <Eye className="h-4 w-4" />
                        </Button>
                        <Button size="sm" variant="ghost">
                          <Download className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </Card>
                ))
              )}
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
};

export default AutomaticFolderManager;